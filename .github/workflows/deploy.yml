name: Deploy Go App to Production

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build Go binary
        run: |
          # Check if main.go exists
          if (-not (Test-Path main.go)) {
              Write-Output "Error: main.go not found"
              exit 1
          }

          # Build application
          $env:GOOS = "linux"
          $env:GOARCH = "amd64"
          go build -o build/app main.go

          # Verify binary was created
          if (-not (Test-Path build/app)) {
              Write-Output "Error: Binary not created"
              exit 1
          }
          Write-Output "Build successful"
          Get-ChildItem build

      - name: Setup SSH
        run: |
          # Create .ssh directory if not exists
          if (-not (Test-Path "$env:USERPROFILE\.ssh")) {
              New-Item -ItemType Directory -Path "$env:USERPROFILE\.ssh" -Force | Out-Null
          }

          # Save SSH key
          $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE\.ssh\id_ed25519" -Encoding ASCII -NoNewline

          # Set permissions
          icacls "$env:USERPROFILE\.ssh\id_ed25519" /inheritance:r /grant:r "$env:USERNAME`:R"
          Write-Output "SSH setup complete"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Production
        run: |
          # Verify binary exists
          if (-not (Test-Path build/app)) {
              Write-Output "Error: Binary not found"
              exit 1
          }

          # Deploy using SCP
          scp -P 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" -o StrictHostKeyChecking=no build/app ${env:PROD_USER}@${env:PROD_HOST}:/home/${env:PROD_USER}/app
          Write-Output "Deployment successful"
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Start Application on Production
        run: |
          # Start application on remote server
          $commands = @"
          pgrep -f app | xargs kill -9 || true
          chmod +x /home/${env:PROD_USER}/app
          nohup /home/${env:PROD_USER}/app > /home/${env:PROD_USER}/app.log 2>&1 &
          sleep 2
          pgrep -f app && echo "Application started (PID: $(pgrep -f app))" || echo "Failed to start application"
          "@

          ssh -p 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" -o StrictHostKeyChecking=no ${env:PROD_USER}@${env:PROD_HOST} "$commands"
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

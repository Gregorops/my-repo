name: Deploy Go App to Production

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build Go binary
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
          if (-not (Test-Path main.go)) {
            Write-Error "‚ùå –§–∞–π–ª main.go –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            Get-ChildItem -Recurse | Out-String | Write-Output
            exit 1
          }

          # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          try {
            $env:GOOS = "linux"
            $env:GOARCH = "amd64"
            go build -ldflags="-s -w" -o build/app main.go
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
            if (-not (Test-Path build/app)) {
              throw "–ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
            }
            $fileSize = (Get-Item "build/app").Length
            if ($fileSize -lt 1MB) {
              Write-Warning "‚ö†Ô∏è –†–∞–∑–º–µ—Ä –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª: $($fileSize/1KB) KB"
            }
            
            Write-Output "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
            Get-ChildItem build
          } catch {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: $_"
            exit 1
          }

      - name: Setup SSH environment
        run: |
          try {
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ .ssh –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if (-not (Test-Path "$env:USERPROFILE\.ssh")) {
              New-Item -ItemType Directory -Path "$env:USERPROFILE\.ssh" -Force | Out-Null
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SSH –∫–ª—é—á–∞
            $env:SSH_PRIVATE_KEY | Out-File -FilePath "$env:USERPROFILE\.ssh\id_ed25519" -Encoding ASCII -NoNewline
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
            $keyContent = Get-Content "$env:USERPROFILE\.ssh\id_ed25519" -Raw
            if (-not $keyContent.Contains("PRIVATE KEY")) {
              throw "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SSH –∫–ª—é—á–∞"
            }

            # –§–∏–∫—Å –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
            ($keyContent -replace "`r`n","`n") | Set-Content "$env:USERPROFILE\.ssh\id_ed25519" -NoNewline
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
            icacls "$env:USERPROFILE\.ssh\id_ed25519" /inheritance:r /grant:r "$env:USERNAME`:R"
            
            Write-Output "‚úÖ SSH –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
          } catch {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH: $_"
            exit 1
          }
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify server connection
        run: |
          try {
            Write-Output "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."
            $connection = Test-NetConnection -ComputerName $env:PROD_HOST -Port 5692 -InformationLevel Detailed
            if (-not $connection.TcpTestSucceeded) {
              throw "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $($env:PROD_HOST):5692"
            }
            
            Write-Output "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
          } catch {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $_"
            exit 1
          }
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Deploy application
        run: |
          try {
            Write-Output "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if (-not (Test-Path "build/app")) {
              throw "–§–∞–π–ª build/app –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }

            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            & "$env:ProgramFiles\OpenSSH\scp.exe" -v -P 5692 `
              -i "$env:USERPROFILE\.ssh\id_ed25519" `
              -o StrictHostKeyChecking=no `
              -o ConnectTimeout=30 `
              "build/app" `
              "$env:PROD_USER@$env:PROD_HOST:/home/$env:PROD_USER/app"
            
            Write-Output "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
          } catch {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ: $_"
            exit 1
          }
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Start application on server
        run: |
          try {
            Write-Output "‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
            
            $commands = @"
              #!/bin/bash
              echo "–¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥: $(pwd)"
              echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:"
              ls -lh ~/
              
              # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
              pgrep -f app && kill $(pgrep -f app) || echo "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
              
              # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
              chmod +x /home/$env:PROD_USER/app
              
              # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
              nohup /home/$env:PROD_USER/app > /home/$env:PROD_USER/app.log 2>&1 &
              sleep 2
              
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
              pgrep -f app && echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $(pgrep -f app))" || {
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:"
                tail -n 20 /home/$env:PROD_USER/app.log
                exit 1
              }
            "@
            
            & "$env:ProgramFiles\OpenSSH\ssh.exe" -p 5692 `
              -i "$env:USERPROFILE\.ssh\id_ed25519" `
              -o StrictHostKeyChecking=no `
              $env:PROD_USER@$env:PROD_HOST "$commands"
          } catch {
            Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $_"
            exit 1
          }
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

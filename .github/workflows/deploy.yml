name: Deploy Go App to Production

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
        working-directory: ${{ github.workspace }}

    steps:
      # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
      - name: Checkout code
        uses: actions/checkout@v4

      # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      # –®–∞–≥ 3: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      - name: Build Go binary
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è main.go
          if (-not (Test-Path main.go)) {
              Write-Output "::error::‚ùå main.go not found in $pwd"
              Get-ChildItem | Format-Table | Out-String | Write-Output
              exit 1
          }

          # –°–±–æ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
          $env:GOOS = "linux"
          $env:GOARCH = "amd64"
          go build -ldflags="-s -w" -o build/app main.go

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–±–æ—Ä–∫–∏
          if (-not (Test-Path build/app)) {
              Write-Output "::error::‚ùå Build failed - binary not created"
              exit 1
          }

          Write-Output "‚úÖ Build successful. Binary size: $((Get-Item build/app).Length/1MB) MB"

      # –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH
      - name: Setup SSH
        run: |
          # –°–æ–∑–¥–∞–Ω–∏–µ .ssh –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          if (-not (Test-Path "$env:USERPROFILE\.ssh")) {
              New-Item -ItemType Directory -Path "$env:USERPROFILE\.ssh" | Out-Null
          }

          # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SSH –∫–ª—é—á–∞
          $keyPath = "$env:USERPROFILE\.ssh\id_ed25519"
          [System.IO.File]::WriteAllText($keyPath, $env:SSH_PRIVATE_KEY.Replace("`r`n","`n"), [System.Text.Encoding]::ASCII)

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
          icacls $keyPath /inheritance:r /grant:r "$env:USERNAME`:R"

          Write-Output "‚úÖ SSH key configured at $keyPath"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      - name: Test SSH connection
        run: |
          $sshPath = "$env:ProgramFiles\OpenSSH\ssh.exe"
          if (-not (Test-Path $sshPath)) {
              Write-Output "::error::‚ùå SSH client not found at $sshPath"
              exit 1
          }

          & $sshPath -T -p 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            -o ConnectTimeout=10 `
            -o LogLevel=ERROR `
            $env:PROD_USER@$env:PROD_HOST "echo 'SSH connection successful'"
          
          if (-not $?) {
              Write-Output "::error::‚ùå SSH connection failed"
              exit 1
          }
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      # –®–∞–≥ 6: –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      - name: Deploy to Production
        run: |
          $scpPath = "$env:ProgramFiles\OpenSSH\scp.exe"
          $source = "build/app"
          $destination = "$env:PROD_USER@$env:PROD_HOST:/home/$env:PROD_USER/app"

          Write-Output "üöÄ Deploying $source to $destination"

          & $scpPath -v -P 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            -o ConnectTimeout=30 `
            $source $destination

          if (-not $?) {
              Write-Output "::error::‚ùå Deployment failed"
              exit 1
          }

          Write-Output "‚úÖ Deployment successful"
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      # –®–∞–≥ 7: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      - name: Start Application
        run: |
          $sshPath = "$env:Windows\System32\OpenSSH"
          $remoteCommands = @"
          #!/bin/bash
          echo "=== Environment ==="
          printenv
          echo "=== Disk Space ==="
          df -h
          echo "=== Starting Application ==="
          pgrep -f app && kill $(pgrep -f app) || echo "No running process found"
          chmod +x ~/app
          nohup ~/app > ~/app.log 2>&1 &
          sleep 2
          pgrep -f app || { echo "::error::‚ùå Failed to start application"; cat ~/app.log; exit 1; }
          echo "‚úÖ Application started (PID: $(pgrep -f app))"
          "@

          & $sshPath -p 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            $env:PROD_USER@$env:PROD_HOST "$remoteCommands"
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

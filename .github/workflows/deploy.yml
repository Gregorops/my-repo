name: Deploy Go App to Production

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build Go binary
        run: |
          if (-not (Test-Path main.go)) {
              Write-Output "::error::main.go not found"
              exit 1
          }
          
          $env:GOOS = "linux"
          $env:GOARCH = "amd64"
          go build -o build/app main.go
          
          if (-not (Test-Path build/app)) {
              Write-Output "::error::Binary not created"
              exit 1
          }

      - name: Find SSH executables
        run: |
          # Проверяем все возможные пути к SSH
          $possiblePaths = @(
              "$env:ProgramFiles\OpenSSH\ssh.exe",
              "$env:SystemRoot\System32\OpenSSH\ssh.exe",
              "C:\Windows\System32\OpenSSH\ssh.exe"
          )
          
          $foundSsh = $null
          foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                  $foundSsh = $path
                  break
              }
          }
          
          if (-not $foundSsh) {
              Write-Output "::error::SSH client not found in any standard location"
              exit 1
          }
          
          # Добавляем путь в переменную окружения
          $sshDir = Split-Path $foundSsh -Parent
          $env:Path += ";$sshDir"
          
          Write-Output "✅ Found SSH at $foundSsh"
          Write-Output "PATH updated: $env:Path"
          
          # Сохраняем путь для последующих шагов
          echo "SSH_PATH=$foundSsh" >> $env:GITHUB_ENV
          echo "SSH_DIR=$sshDir" >> $env:GITHUB_ENV

      - name: Setup SSH key
        run: |
          # Создаем .ssh директорию
          if (-not (Test-Path "$env:USERPROFILE\.ssh")) {
              New-Item -ItemType Directory "$env:USERPROFILE\.ssh" | Out-Null
          }
          
          # Сохраняем ключ
          $env:SSH_PRIVATE_KEY | Out-File "$env:USERPROFILE\.ssh\id_ed25519" -Encoding ASCII
          
          # Фиксим переносы строк
          (Get-Content "$env:USERPROFILE\.ssh\id_ed25519") -replace "`r`n","`n" | Set-Content "$env:USERPROFILE\.ssh\id_ed25519"
          
          # Устанавливаем права
          icacls "$env:USERPROFILE\.ssh\id_ed25519" /inheritance:r /grant:r "$env:USERNAME`:R"
          
          Write-Output "✅ SSH key configured"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          # Используем найденный путь к SSH
          & "$env:SSH_PATH" -T -p 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            -o ConnectTimeout=10 `
            $env:PROD_USER@$env:PROD_HOST "echo 'SSH test successful'"
          
          if (-not $?) {
              Write-Output "::error::SSH connection failed"
              exit 1
          }
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Deploy to Production
        run: |
          # Используем SCP из той же директории
          $scpPath = Join-Path $env:SSH_DIR "scp.exe"
          
          & $scpPath -P 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            build/app $env:PROD_USER@$env:PROD_HOST:"/home/$env:PROD_USER/app"
          
          if (-not $?) {
              Write-Output "::error::Deployment failed"
              exit 1
          }
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Start Application
        run: |
          & "$env:SSH_PATH" -p 5692 -i "$env:USERPROFILE\.ssh\id_ed25519" `
            -o StrictHostKeyChecking=no `
            $env:PROD_USER@$env:PROD_HOST `
            "chmod +x /home/$env:PROD_USER/app && nohup /home/$env:PROD_USER/app > /home/$env:PROD_USER/app.log 2>&1 &"
        env:
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

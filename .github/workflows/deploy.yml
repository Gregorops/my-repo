name: Deploy Go App to Production

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build Go binary
        run: |
          if (-not (Test-Path main.go)) {
              Write-Output "::error::main.go not found"
              exit 1
          }
          
          $env:GOOS = "linux"
          $env:GOARCH = "amd64"
          go build -o build/app main.go
          
          if (-not (Test-Path build/app)) {
              Write-Output "::error::Binary not created"
              exit 1
          }

      - name: Setup SSH environment
        run: |
          # Create .ssh directory if not exists
          if (-not (Test-Path "$env:USERPROFILE\.ssh")) {
              New-Item -ItemType Directory "$env:USERPROFILE\.ssh" -Force | Out-Null
          }
          
          # Save SSH key with proper formatting
          $env:SSH_PRIVATE_KEY | Out-File "$env:USERPROFILE\.ssh\id_ed25519" -Encoding ASCII -NoNewline
          
          # Fix line endings if needed
          (Get-Content "$env:USERPROFILE\.ssh\id_ed25519") -replace "`r`n","`n" | Set-Content "$env:USERPROFILE\.ssh\id_ed25519" -NoNewline
          
          # Set strict permissions
          icacls "$env:USERPROFILE\.ssh\id_ed25519" /inheritance:r /grant:r "$env:USERNAME`:R"
          
          Write-Output "✅ SSH key configured"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          # Verify SSH client exists
          if (-not (Test-Path $env:SSH_PATH)) {
              Write-Output "::error::SSH executable not found at $env:SSH_PATH"
              exit 1
          }
          
          # Prepare the SSH command as a single line
          $sshCommand = "& `"$env:SSH_PATH`" -T -p 5692 -i `"$env:USERPROFILE\.ssh\id_ed25519`" " +
                        "-o StrictHostKeyChecking=no " +
                        "-o ConnectTimeout=10 " +
                        "`"$env:PROD_USER@$env:PROD_HOST`" " +
                        "`"echo 'SSH test successful'`""
          
          Write-Output "Executing SSH test command..."
          Write-Output $sshCommand
          
          try {
              Invoke-Expression $sshCommand
              if ($LASTEXITCODE -ne 0) {
                  throw "SSH connection failed with exit code $LASTEXITCODE"
              }
              Write-Output "✅ SSH connection successful"
          } catch {
              Write-Output "::error::❌ SSH connection failed: $_"
              exit 1
          }
        env:
          SSH_PATH: C:\Windows\System32\OpenSSH\ssh.exe
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Deploy to Production
        run: |
          $scpPath = Join-Path $env:SSH_DIR "scp.exe"
          
          if (-not (Test-Path $scpPath)) {
              Write-Output "::error::SCP executable not found at $scpPath"
              exit 1
          }
          
          $scpCommand = "& `"$scpPath`" -v -P 5692 -i `"$env:USERPROFILE\.ssh\id_ed25519`" " +
                        "-o StrictHostKeyChecking=no " +
                        "`"build/app`" " +
                        "`"$env:PROD_USER@$env:PROD_HOST:/home/$env:PROD_USER/app`""
          
          Write-Output "Executing deployment command..."
          Write-Output $scpCommand
          
          try {
              Invoke-Expression $scpCommand
              if ($LASTEXITCODE -ne 0) {
                  throw "Deployment failed with exit code $LASTEXITCODE"
              }
              Write-Output "✅ Deployment successful"
          } catch {
              Write-Output "::error::❌ Deployment failed: $_"
              exit 1
          }
        env:
          SSH_DIR: C:\Windows\System32\OpenSSH
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}

      - name: Start Application
        run: |
          $startCommand = "& `"$env:SSH_PATH`" -p 5692 -i `"$env:USERPROFILE\.ssh\id_ed25519`" " +
                         "-o StrictHostKeyChecking=no " +
                         "`"$env:PROD_USER@$env:PROD_HOST`" " +
                         "`"chmod +x /home/$env:PROD_USER/app && " +
                         "nohup /home/$env:PROD_USER/app > /home/$env:PROD_USER/app.log 2>&1 &`""
          
          Write-Output "Executing start command..."
          Write-Output $startCommand
          
          try {
              Invoke-Expression $startCommand
              if ($LASTEXITCODE -ne 0) {
                  throw "Application start failed with exit code $LASTEXITCODE"
              }
              Write-Output "✅ Application started successfully"
          } catch {
              Write-Output "::error::❌ Failed to start application: $_"
              exit 1
          }
        env:
          SSH_PATH: C:\Windows\System32\OpenSSH\ssh.exe
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_HOST: ${{ secrets.PROD_HOST }}
